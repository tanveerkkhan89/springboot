name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      destroy_cluster:
        description: 'Set to true to destroy the cluster'
        required: false
        default: 'false'
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Java JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Build with Maven
        run: mvn clean package

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-image:${{ github.sha }} .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/my-image:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.4

      - name: Terraform Init
        run: terraform init
        working-directory: ekscluster
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2

      - name: Terraform Apply
        run: |
          for i in {1..5}; do
            terraform apply -lock=false -auto-approve && break || sleep 10
          done
        working-directory: ekscluster
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2

  extract:
    runs-on: ubuntu-latest
    needs: deploy
    outputs:
      cluster_name: ${{ steps.terraform-output.outputs.cluster_name }}
      vpc_id: ${{ steps.terraform-output.outputs.vpc_id }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: List directory contents
        run: |
          ls -alh

      - name: Terraform Init
        run: terraform init
        working-directory: ekscluster
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2

      - name: Terraform Output
        id: terraform-output
        run: |
          CLUSTER_NAME=$(terraform output -raw eks_cluster_name | tr -d '\r' | tr -d '\n')
          VPC_ID=$(terraform output -raw vpc_id | tr -d '\r' | tr -d '\n')
          echo "CLUSTER_NAME=${CLUSTER_NAME}"
          echo "VPC_ID=${VPC_ID}"
          echo "::set-output name=cluster_name::${CLUSTER_NAME}"
          echo "::set-output name=vpc_id::${VPC_ID}"
        working-directory: ekscluster
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2

  install_kubectl_and_helm:
    runs-on: ubuntu-latest
    needs: extract
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Change Directory
        run: cd ./my-spring-app

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.23.0/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
          kubectl version --client

      - name: Install Helm
        run: |
          curl -fsSL -o helm.tar.gz https://get.helm.sh/helm-v3.11.0-linux-amd64.tar.gz
          tar -zxvf helm.tar.gz
          sudo mv linux-amd64/helm /usr/local/bin/helm
          helm version --client

      - name: Add Helm Repository
        run: |
          helm repo add eks https://aws.github.io/eks-charts
          helm repo update

      - name: Configure kubectl to use EKS
        run: |
          aws eks update-kubeconfig --name ${{ needs.extract.outputs.cluster_name }} --region us-east-2
          kubectl cluster-info
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2

      - name: Deploy AWS Load Balancer Controller
        run: |
            #kubectl create serviceaccount alb-ingress-controller -n kube-system
           #kubectl annotate serviceaccount alb-ingress-controller -n kube-system eks.amazonaws.com/role-arn=arn:aws:iam::631327475467:role/ALBIngressIAMRole

            
            helm repo add eks https://aws.github.io/eks-charts
            helm repo update
            

            helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
                --set clusterName=${{ needs.extract.outputs.cluster_name }} \
                --set serviceAccount.create=false \
                --set serviceAccount.name=alb-ingress-controller \
                --set region=us-east-2 \
                --set vpcId=${{ needs.extract.outputs.vpc_id }} \
                --namespace kube-system
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2

      - name: Deploy with Helm
        run: |
          helm upgrade --install my-release . --set image.tag=${{ github.sha }}
        working-directory: ./my-spring-app
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2

  cleanup:
    runs-on: ubuntu-latest
    needs: deploy
    if: ${{ github.event.inputs.destroy_cluster == 'true' }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.4

      - name: Terraform Init
        run: terraform init
        working-directory: ekscluster
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2

      - name: Terraform Destroy
        run: |
          for i in {1..5}; do
            terraform destroy -lock=false -auto-approve && break || sleep 10
          done
        working-directory: ekscluster
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2
